var Microsoft;!function(t){var e;!function(t){"use strict";angular.module("features",["forecast","ui.bootstrap","ui.router","ngSanitize","ngAnimate"])}(e=t.Store||(t.Store={}))}(Microsoft||(Microsoft={}));var HungCao;!function(t){var e;!function(t){"use strict";angular.module("app",["components","features"])}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));var Microsoft;!function(t){var e;!function(t){"use strict";angular.module("components",[])}(e=t.Store||(t.Store={}))}(Microsoft||(Microsoft={}));var HungCao;!function(t){var e;!function(t){"use strict";angular.module("forecast",[])}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));var Microsoft;!function(t){var e;!function(t){var e=function(){function t(t,e,r){var i=this;this.configureRoutes=function(){i.registerState("forecast","/forecast","templates/features/five-days-forecast/forecast.html",HungCao.Apps.ForecastController),i.registerDefault("forecast")},this.registerState=function(t,e,r,n){var o={url:e,templateUrl:r,controller:n,controllerAs:"vm",reloadOnSearch:!1,requireADLogin:!0};i.$stateProvider.state(t,o)},this.registerDefault=function(t){i.$urlRouterProvider.otherwise(t)},this.$stateProvider=t,this.$urlRouterProvider=e,this.configureRoutes(),r.html5Mode({enabled:!0,requireBase:!0}).hashPrefix("!")}return t.$inject=["$stateProvider","$urlRouterProvider","$locationProvider"],t}();angular.module("features").config(e)}(e=t.Store||(t.Store={}))}(Microsoft||(Microsoft={}));var HungCao;!function(t){var e;!function(t){"use strict";var e=function(){function t(t,e){e.html5Mode(!0)}return t.$inject=["$httpProvider","$locationProvider"],t}();angular.module("app").config(e)}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));var HungCao;!function(t){var e;!function(t){"use strict";var e=function(){function t(t){var e=this;this.loadConfig=function(){e.loader.importConfig(e.onLoadCompleted)},this.onLoadCompleted=function(t){t?e.loaded=!0:console.error("Unable to load configuration")},this.loader=t,this.loadConfig()}return t.$inject=["configLoader"],t}();angular.module("app").controller("AppController",e)}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));var HungCao;!function(t){var e;!function(t){"use strict";var e=function(){function t(t,e){var r=this;this.onSuccess=function(t){r.forecastApiService.apiUrl=t.data.apiHost,r.forecastApiService.apiKey=t.data.apiKey,r.onLoadCompleted(!0)},this.onError=function(t){r.onLoadCompleted(!1)},this.apiService=t,this.forecastApiService=e}return t.prototype.importConfig=function(t){this.onLoadCompleted=t,this.apiService.getLocal("configuration/app.config.json").then(this.onSuccess,this.onError)},t.$inject=["apiService","forecastApiService"],t}();t.ConfigLoader=e,angular.module("app").service("configLoader",e)}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));var HungCao;!function(t){var e;!function(t){"use strict";var e=function(){function t(t,e,r){this.$q=t,this.$http=e,this.$location=r}return t.prototype.getWithQueryParams=function(t,e){var r=this.execute("GET",t,e,this.$q.defer(),null);return r},t.prototype.getLocal=function(t){return this.$http.get(t)},t.prototype.execute=function(t,e,r,i,n){var o={method:t,url:e,data:n,params:r};return this.$http(o).then(function(t){i.resolve(t)},function(t){i.reject(t)}),i.promise},t.$inject=["$q","$http","$location"],t}();t.ApiService=e,angular.module("components").service("apiService",e)}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));var HungCao;!function(t){var e;!function(t){"use strict";var e=function(){function t(){this.convertToWeekDay=function(t){var e=new Array(7);return e[0]="Monday",e[1]="Tuesday",e[2]="Wednesday",e[3]="Thursday",e[4]="Friday",e[5]="Saturday",e[6]="Sunday",0===t.getDay()?"Sunday":e[t.getDay()-1]},this.convertToMonthDay=function(t){var e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],r=t.getDate(),i=t.getMonth();return e[i]+" "+r}}return t.$inject=[],t}();t.UtilitiesService=e,angular.module("components").service("utilitiesService",e)}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));var HungCao;!function(t){var e;!function(t){"use strict";var e=function(){function t(){var t=this;this.loadFromJson=function(e){for(var r in t)"function"!=typeof t[r]&&(t[r]=e[r])},this.convertCurrentTime=function(){if(t.time){var e=new Date(1e3*t.time);t.dateCurrentTime=e}},this.summary=null,this.icon=null,this.temperature=null,this.humidity=null,this.windSpeed=null,this.dewPoint=null,this.time=null}return t}();t.ForecastData=e}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));var __extends=this&&this.__extends||function(t,e){function r(){this.constructor=t}for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},HungCao;!function(t){var e;!function(t){"use strict";var e=function(t){function e(){var e=this;t.call(this),this.convertMaxMinTime=function(){if(e.temperatureMinTime){var t=new Date(1e3*e.temperatureMinTime);e.dateTempMinTime=t}if(e.temperatureMaxTime){var t=new Date(1e3*e.temperatureMaxTime);e.dateTempMaxTime=t}},this.temperatureMin=null,this.temperatureMinTime=null,this.temperatureMax=null,this.temperatureMaxTime=null}return __extends(e,t),e}(t.ForecastData);t.DailyForecastData=e}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));var HungCao;!function(t){var e;!function(t){"use strict";var e=function(){function t(){this.data=new Array}return t}();t.DailySummary=e}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));var HungCao;!function(t){var e;!function(t){"use strict";var e=function(){function t(t,e){var r=this;this.$q=t,this.apiService=e,this.get=function(t,e){r.apiUrl+r.apiKey+"/"+t+","+e;return r.apiService.getLocal("configuration/data.json")}}return t.$inject=["$q","apiService"],t}();t.ForecastApiService=e,angular.module("forecast").service("forecastApiService",e)}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));var HungCao;!function(t){var e;!function(t){"use strict";var e=function(){function e(e,r){var i=this;this.forecastApiService=e,this.utilitiesService=r,this.init=function(){i.forecastApiService.get("37.8267","-122.423").then(i.loadCompleted,i.loadError)},this.loadCompleted=function(e){var r=e.data;if(r.currently&&(i.currently.loadFromJson(r.currently),i.currently.convertCurrentTime(),i.currentWeekDayString=i.utilitiesService.convertToWeekDay(i.currently.dateCurrentTime),i.currentMonthDayString=i.utilitiesService.convertToMonthDay(i.currently.dateCurrentTime)),r.daily&&(i.dailySummary.summary=r.daily.summary,i.dailySummary.icon=r.daily.icon,r.daily.data))for(var n in r.daily.data){if(i.dailySummary.data.length===i.numberOfDays)break;var o=new t.DailyForecastData;o.loadFromJson(r.daily.data[n]),o.convertMaxMinTime(),o.convertCurrentTime(),i.dailySummary.data.push(o)}},this.loadError=function(t){},this.forecastApiService=e,this.dailySummary=new t.DailySummary,this.numberOfDays=5,this.currently=new t.ForecastData,this.utilitiesService=r}return e.prototype.$onInit=function(){this.dateModel=new Date,this.init()},e.$inject=["forecastApiService","utilitiesService"],e}();t.ForecastController=e,angular.module("forecast").controller("ForecastController",e)}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));var HungCao;!function(t){var e;!function(t){"use strict";var e=function(){function t(t){this.utilitiesService=t,console.log(this.model),this.utilitiesService=t,this.currentWeekDayString=this.utilitiesService.convertToWeekDay(this.model.dateCurrentTime),this.currentMonthDayString=this.utilitiesService.convertToMonthDay(this.model.dateCurrentTime),this.displayMaxTemp=this.model.temperatureMax,this.displayMinTemp=this.model.temperatureMin,this.displayMaxTime=this.model.dateTempMaxTime.getHours(),this.displayMinTime=this.model.dateTempMinTime.getHours(),this.displayHumidity=Math.round(100*this.model.humidity)}return t.$inject=["utilitiesService"],t}();t.ForecastDaybox=e;var r=function(){function t(){this.controller=e,this.controllerAs="vm",this.bindings={model:"<"},this.templateUrl=""}return t}();t.ForecastDayboxComponentOptions=r;var i=new r;i.templateUrl="templates/features/five-days-forecast/components/forecast-day-box/templates/forecast-day-box.html",angular.module("forecast").component("forecastDayBox",i)}(e=t.Apps||(t.Apps={}))}(HungCao||(HungCao={}));
//# sourceMappingURL=data:application/json;base64,
